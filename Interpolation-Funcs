import numpy as np

#Neville's Method function
#vec_x is a vector of x values, f_x is the value of the function at each x in vec_x

def Neville(x, vec_x, f_x):
    '''Computes interpolation for a point x using Neville's Method given a vector of x values vec_x
    and a vector, f_x, of corresponding y values for each value in vec_x'''
    
    n = np.size(vec_x) - 1
    Q_table = np.zeros((n+1, n+1)) #create an n x n matrix of zeros
    
    for i in np.arange(0, n+1): #set the vector f_x as the first column in Q_table
        Q_table[i][0] = f_x[i]
        
    for j in np.arange(1, n+1):
        for i in np.arange(j, n+1): #set the value for Q_table[i][j]
            Q_table[i][j] = (((x - vec_x[i-j])*Q_table[i][j-1]) - ((x - vec_x[i])*Q_table[i-1][j-1]))/(vec_x[i] - vec_x[i - j])
            
    #output the approximation and the Q_table
    return(Q_table[n][n], Q_table)

#Example:

#Number 1
#part b
#x = -1/3

#degree one
x1b1 = [-0.5, -0.25]
f_x1b1 = [-0.02475, 0.3349375]

P_xb1, Qtableb1 = Neville(-1/3, x1b1, f_x1b1)
print("The approximation for f(-1/3) using a polynomial of degree one is: %.4f" %(P_xb1))
print("The values of the Q_table are: ")
print(Qtableb1)

#degree two
x1b2 = [-0.5, -0.25, 0]
f_x1b2 = [-0.02475, 0.3349375, 1.101]

P_xb2, Qtableb2 = Neville(-1/3, x1b2, f_x1b2)
print("The approximation for f(-1/3) using a polynomial of degree two is: %.4f" %(P_xb2))
print("The values of the Q_table are: ")
print(Qtableb2)

#degree three
x1b3 = [-0.5, -0.25, 0, -0.75]
f_x1b3 = [-0.02475, 0.3349375, 1.101, -0.07181250]

P_xb3, Qtableb3 = Neville(-1/3, x1b3, f_x1b3)
print("The approximation for f(-1/3) using a polynomial of degree three is: %.4f" %(P_xb3))
print("The values of the Q_table are: ")
print(Qtableb3)


#Divided Differences

def DivDif(vec_x, f_x):
    '''Computes coefficients for the interpolating polynomial
    using Newton's Divided-Difference Formula'''
    
    n = np.size(vec_x) - 1
    F_table = np.zeros((n+1, n+1)) #create an n x n matrix of zeros
    
    for i in np.arange(0, n+1): #set the vector f_x as the first column in Q_table
        F_table[i][0] = f_x[i]
        
    for j in np.arange(1, n+1):
        for i in np.arange(j, n+1): #set the value for F_table[i][j]
            F_table[i][j] = ((F_table[i][j-1]) - (F_table[i-1][j-1]))/(vec_x[i] - vec_x[i - j])
            
    #output the approximation and the F_table
    return(F_table)

#Example:
#degree one
x1a1 = [8.1, 8.3]
f_x1a1 = [16.94410, 17.56492]

Ftable = DivDif(x1a1, f_x1a1)
print("The coefficients are on the diagonal of the following table: ")
print(Ftable)

#degree two
x1a2 = [8.1, 8.3, 8.6]
f_x1a2 = [16.94410, 17.56492, 18.50515]

Ftable = DivDif(x1a2, f_x1a2)
print("The coefficients are on the diagonal of the following table: ")
print(Ftable)

#degree three
x1a3 = [8.1, 8.3, 8.6, 8.7]
f_x1a3 = [16.94410, 17.56492, 18.50515, 18.82091]

Ftable = DivDif(x1a3, f_x1a3)
print("The coefficients are on the diagonal of the following table: ")
print(Ftable)



#Difference Table

def DifTable(vec_x, f_x):
    '''Computes the table of difference coefficients for Newton's
   forward and backward difference formulas'''
    
    n = np.size(vec_x) - 1
    
    Table = np.zeros((n+1, n+1))
    
    for i in np.arange(0, n+1): #set the vector f_x as the first column in Table
        Table[i][0] = f_x[i]
        
    for j in np.arange(1, n+1):
        for i in np.arange(j, n+1): #set the value for Table[i][j]
            Table[i][j] = round(Table[i][j-1] - Table[i-1][j-1], 6)
    
    return(Table)

#Example:
#part a
x4a = [0, 0.25, 0.5, 0.75]
f_x4a = [1, 1.64872, 2.71828, 4.48169]

DifTable4a = DifTable(x4a, f_x4a)
print("The values of the difference table are: ")
print(DifTable4a)

#part b
x4b = [0.1, 0.2, 0.3, 0.4]
f_x4b = [-0.29004986, -0.56079734, -0.81401972, -1.0526302]

DifTable4b = DifTable(x4b, f_x4b)
print("The values of the difference table are: ")
print(DifTable4b)



#Hermite Function

def Hermite(vec_x, f_x, df_x):
    '''Computes the coefficients of the interpolating polynomial using
    Hermite interpolation'''
    
    n = np.size(vec_x)
    z = np.zeros((2*n, 1))
    Q_table = np.zeros((2*n, 2*n))
    
    for i in np.arange(0, n):
        z[2*i] = vec_x[i]
        z[(2*i)+1] = vec_x[i]
        Q_table[2*i][0] = f_x[i]
        Q_table[(2*i)+1][0] = f_x[i]
        Q_table[(2*i)+1][1] = df_x[i]
        
        if i != 0:
            Q_table[2*i][1] = (Q_table[2*i][0] - Q_table[(2*i)-1][0])/(z[2*i] - z[(2*i)-1])
    
    for i in np.arange(2, 2*n):
        for j in np.arange(2, i+1):
            Q_table[i][j] = (Q_table[i][j-1] - Q_table[i-1][j-1])/(z[i] - z[i-j])

    return Q_table

#Example:
#part a
vec_x1a = [8.3, 8.6]
vec_fx1a = [17.56492, 18.50515]
vec_dfx1a = [3.116256, 3.151762]

Htable1a = Hermite(vec_x1a, vec_fx1a, vec_dfx1a)
print("The coefficients are along the diagonal of the following table: ")
print(Htable1a)

#part d
vec_x1d = [0.1, 0.2, 0.3, 0.4]
vec_fx1d = [-0.62049958, -0.28398668, 0.00660095, 0.24842440]
vec_dfx1d = [3.58502082, 3.14033271, 2.66668043, 2.16529366]

Htable1d = Hermite(vec_x1d, vec_fx1d, vec_dfx1d)
print("The coefficients are along the diagonal of the following table: ")
print(Htable1d)


#natural cubic splines

def N_cubic_spline(x, a):
    '''returns the coefficients of the natural cubic spline
    interpolant for a function'''
    
    n = np.size(x) - 1
    
    #set size of different variables
    h = np.zeros((n, 1))
    alpha = np.zeros((n, 1))
    l = np.zeros((n+1, 1))
    mu = np.zeros((n+1, 1))
    z = np.zeros((n+1, 1))
    c = np.zeros((n+1, 1))
    b = np.zeros((n+1, 1))
    d = np.zeros((n+1, 1))
    
    #calculate coefficients
    for i in np.arange(n):
        h[i] = x[i+1] - x[i]
    
    for i in np.arange(1, n):
        alpha[i] = (3/h[i])*(a[i+1] - a[i]) - (3/h[i-1])*(a[i] - a[i-1])
    
    l[0] = 1
    mu[0] = 0
    z[0] = 0
    
    for i in np.arange(1, n):
        l[i] = 2*(x[i+1] - x[i-1]) - h[i-1]*mu[i-1]
        mu[i] = h[i]/l[i]
        z[i] = (alpha[i] - h[i-1]*z[i-1])/l[i]
        
    l[n] = 1
    z[n] = 0
    c[n] = 0
    
    for j in np.arange(n-1, -1, -1):
        c[j] = z[j] - mu[j]*c[j+1]
        b[j] = ((a[j+1] - a[j])/h[j]) - ((h[j]*(c[j+1] + 2*c[j]))/3)
        d[j] = (c[j+1] - c[j])/(3*h[j])
     
    #get coefficients sorted for output
    a_coeffs = []
    b_coeffs = []
    c_coeffs = []
    d_coeffs = []
    
    for j in np.arange(0, n):
        a_coeffs.append(a[j])
        b_coeffs.append(b[j])
        c_coeffs.append(c[j])
        d_coeffs.append(d[j])
    
    return a_coeffs, b_coeffs, c_coeffs, d_coeffs

#Example:
x = [8.3, 8.6]
f = [17.56492, 18.50515]

x1 = [0, 0.25, 0.5, 1, 1.25]
f1 = [0, 22.99, 46.73, 97.35, 124.06]

print(N_cubic_spline(x, f))
print(N_cubic_spline(x1, f1))
